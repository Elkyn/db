#!/bin/bash
set -e

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
RED='\033[0;31m'
NC='\033[0m'

# Get version from argument or prompt
VERSION=${1}
if [[ -z "$VERSION" ]]; then
    echo -e "${BLUE}Current versions:${NC}"
    
    # Show current version from package.json if exists
    if [[ -f "nodejs-bindings/package.json" ]]; then
        CURRENT_NPM=$(grep '"version"' nodejs-bindings/package.json | head -1 | cut -d'"' -f4)
        echo "  NPM Package: $CURRENT_NPM"
    fi
    
    # Show latest git tag
    LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
    echo "  Latest Git Tag: $LATEST_TAG"
    
    echo ""
    read -p "Enter new version (e.g., 0.1.0 or v0.1.0): " VERSION
fi

# Normalize version (remove 'v' prefix if present for package.json)
VERSION_WITHOUT_V=${VERSION#v}
VERSION_WITH_V="v$VERSION_WITHOUT_V"

echo -e "${BLUE}Updating version to: $VERSION_WITHOUT_V${NC}"

# Update Node.js package.json
if [[ -f "nodejs-bindings/package.json" ]]; then
    echo -e "${BLUE}Updating nodejs-bindings/package.json...${NC}"
    # Use a temporary file to preserve formatting
    cat nodejs-bindings/package.json | \
        sed "s/\"version\": \"[^\"]*\"/\"version\": \"$VERSION_WITHOUT_V\"/" > \
        nodejs-bindings/package.json.tmp
    mv nodejs-bindings/package.json.tmp nodejs-bindings/package.json
    echo -e "${GREEN}✓ Updated npm package version${NC}"
fi

# Create version.zig for Zig code
echo -e "${BLUE}Creating src/version.zig...${NC}"
cat > src/version.zig << EOF
// Auto-generated by update_version.sh
pub const version = "$VERSION_WITHOUT_V";
pub const version_string = "Elkyn DB v$VERSION_WITHOUT_V";
EOF
echo -e "${GREEN}✓ Created version.zig${NC}"

# Update README if it contains version badges
if grep -q "version-" README.md 2>/dev/null; then
    echo -e "${BLUE}Updating README.md version badges...${NC}"
    sed -i.bak "s/version-[0-9]\+\.[0-9]\+\.[0-9]\+[^-]*/version-$VERSION_WITHOUT_V/g" README.md
    rm -f README.md.bak
    echo -e "${GREEN}✓ Updated README badges${NC}"
fi

# Create or update VERSION file
echo "$VERSION_WITHOUT_V" > VERSION
echo -e "${GREEN}✓ Created VERSION file${NC}"

# Show what will be committed
echo -e "${BLUE}Files changed:${NC}"
git status --short

echo ""
echo -e "${YELLOW}Next steps:${NC}"
echo "1. Review changes: git diff"
echo "2. Commit changes: git commit -am \"chore: bump version to $VERSION_WITHOUT_V\""
echo "3. Create release: ./create_release.sh $VERSION_WITH_V"
echo ""
echo -e "${YELLOW}The release script will:${NC}"
echo "  - Create git tag: $VERSION_WITH_V"
echo "  - Build all binaries"
echo "  - Create GitHub release"
echo "  - Upload artifacts"